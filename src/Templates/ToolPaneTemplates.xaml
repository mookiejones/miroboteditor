<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:templates="clr-namespace:miRobotEditor.Templates"
                    xmlns:gui="clr-namespace:miRobotEditor.GUI"
                    xmlns:local="clr-namespace:miRobotEditor.Controls"
                    xmlns:vm="clr-namespace:miRobotEditor.ViewModel"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:classes="clr-namespace:miRobotEditor.Classes"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:miRobotEditor.Converters"
                    xmlns:miRobotEditor="clr-namespace:miRobotEditor"
                    xmlns:core="clr-namespace:miRobotEditor.Core;assembly=miRobotEditor.Core">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/miRobotEditor;component/Templates/Generic.xaml" />
        <ResourceDictionary Source="/miRobotEditor;component/Templates/ExtendedGridSplitter.xaml"/>
        <ResourceDictionary Source="/miRobotEditor;component/Styles/Styles.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <converters:BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <converters:VariableToFunctionConverter x:Key="VariableToFunctionConverter"/>
    <converters:WidthConverter x:Key="WidthConverter"/>


    <!-- Local Variables-->
    <DataTemplate DataType="{x:Type vm:LocalVariablesViewModel}">
        <templates:VisualVariableItem DataContext="{Binding ActiveEditor, NotifyOnSourceUpdated=True, Source={x:Static miRobotEditor:Workspace.Instance}}" ItemsSource="{Binding TextBox.Variables}"/>
    </DataTemplate>

    <!-- Notes Template -->
    <DataTemplate DataType="{x:Type vm:NotesViewModel}">
        <TextBox Text="{Binding Text}" TextWrapping="WrapWithOverflow" BorderBrush="DarkGray"/>
    </DataTemplate>
    <!-- object Broswer -->
    <DataTemplate DataType="{x:Type vm:ObjectBrowserViewModel}">
        <Grid DataContext="{DynamicResource Workspace}">            
            <TabControl  x:Name="Items" VerticalAlignment="Stretch" >                          
                <TabItem Header="Functions" >
                    <templates:VisualVariableItem ItemsSource="{Binding ActiveEditor.FileLanguage.Functions}"/>
                </TabItem>
                <TabItem Header="Fields">
                    <templates:VisualVariableItem ItemsSource="{Binding ActiveEditor.FileLanguage.Fields}"/>
                </TabItem>
                <TabItem Header="Files">
                    <DataGrid AutoGenerateColumns="False" ItemsSource="{Binding ActiveEditor.FileLanguage.Files}">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="Name">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Name}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Size">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Length}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Type">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Extension}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Path" Width="*">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding FullName}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </TabItem>
                <TabItem Header="Positions">
                    <templates:VisualVariableItem ItemsSource="{Binding ActiveEditor.FileLanguage.Positions}"  />
                </TabItem>
                <TabItem Header="Signals">
                    <templates:VisualVariableItem ItemsSource="{Binding ActiveEditor.FileLanguage.Signals}"  />
                </TabItem>
            </TabControl>
            <mah:ProgressRing IsActive="True" IsLarge="True" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Visibility="{Binding ActiveEditor.FileLanguage.BWProgressVisibility}"  Foreground="{DynamicResource HighlightLightBrush}"  />
        </Grid>

    </DataTemplate>


    <!-- Message View Model-->
    <DataTemplate DataType="{x:Type core:MessageViewModel}">
        <DataGrid ItemsSource="{Binding Messages}" SelectedItem="{Binding SelectedMessage}" ColumnHeaderStyle="{DynamicResource DataGridHeaderGlassEffect}" Style="{DynamicResource DataGridStyle}"  AutoGenerateColumns="False">
            <DataGrid.Columns>
                <DataGridTemplateColumn  Width="Auto" IsReadOnly="True">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image Height="16" Width="16" IsEnabled="False" Source="{Binding Icon}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Title" Width="Auto" IsReadOnly="True" Binding="{Binding Title}"/>
                <DataGridTextColumn Header="Message" Width="*"  IsReadOnly="True" Binding="{Binding Description}"/>
            </DataGrid.Columns>
            <DataGrid.RowDetailsTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Description}" TextWrapping="WrapWithOverflow">
                        <TextBlock.ToolTip>
                            <ToolTip>
                                <StackPanel Orientation="Horizontal">
                                    <Image Source="{Binding Icon}"/>
                                    <StackPanel Orientation="Vertical">
                                        <TextBlock Text="{Binding Title, StringFormat=Title    \{0\}}"/>
                                        <Separator />
                                        <TextBlock Text="{Binding Description, StringFormat=Description     \{0\}}"/>
                                    </StackPanel>
                                </StackPanel>
                            </ToolTip>
                        </TextBlock.ToolTip>
					</TextBlock>
                </DataTemplate>
            </DataGrid.RowDetailsTemplate>
        </DataGrid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type core:OutputWindowMessage}">
        <Label >
            <StackPanel>
                <Image Source="{Binding Icon}"/>
                <TextBlock Text="{Binding Title}"/>
                <TextBlock Text="{Binding Description}" ToolTip="Hello" />
            </StackPanel>
        </Label>
    </DataTemplate>


    <DataTemplate DataType="{x:Type vm:ValueBoxViewModel}">
        <StackPanel Orientation="Vertical">
            <StackPanel.Resources>
                <vm:AngleToolTipConverter x:Key="Tooltip"/>
                <Style TargetType="{x:Type TextBox}" >
                    <Setter	Property="TextAlignment" Value="Center" />
                    <Setter	Property="VerticalAlignment" Value="Stretch" />
                    <Setter Property="IsReadOnly" Value="{Binding IsReadOnly}"/>
                    <Setter Property="Width" Value="53"/>
                    <Setter Property="Margin" Value="0,2,2,0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding BoxVisibility}" Value="Collapsed">
                            <Setter Property="Width" Value="71"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Resources>
            <ComboBox   ItemsSource="{Binding SelectionItems}" IsReadOnly="True" DisplayMemberPath= "ValueCartesianString"  SelectedValuePath= "ValueCartesianEnum" SelectedValue="{Binding SelectedItem}"/>
            <StackPanel Orientation="Horizontal"  >
                <TextBox x:Name="V1" Text="{Binding V1, StringFormat=\{0:F3\}, UpdateSourceTrigger=LostFocus}" ToolTip="{Binding SelectedItem, ConverterParameter=V1, Converter={StaticResource Tooltip}}"  />
                <TextBox x:Name="V2" Text="{Binding V2, StringFormat=\{0:F3\}, UpdateSourceTrigger=LostFocus}" ToolTip="{Binding SelectedItem, ConverterParameter=V2, Converter={StaticResource Tooltip}}"  />
                <TextBox x:Name="V3" Text="{Binding V3, StringFormat=\{0:F3\}, UpdateSourceTrigger=LostFocus}" ToolTip="{Binding SelectedItem, ConverterParameter=V3, Converter={StaticResource Tooltip}}"  />
                <TextBox x:Name="V4" Text="{Binding V4, StringFormat=\{0:F3\}, UpdateSourceTrigger=LostFocus}" Visibility="{Binding BoxVisibility}" ToolTip="{Binding SelectedItem, ConverterParameter=V4, Converter={StaticResource Tooltip}}"  />
            </StackPanel>
        </StackPanel>
    </DataTemplate>


    <!-- Angle Converter-->
    <DataTemplate DataType="{x:Type vm:AngleConvertorViewModel}">
        <StackPanel Orientation="Vertical">

            <GroupBox  Header="Input" Content="{Binding InputItems}"/>
            <GroupBox Header="Output" Content="{Binding OutputItems}"/>
            <TextBox x:Name="txtMatrix" IsReadOnly="True" TextAlignment="Center" Text="{Binding Matrix}" Height="80" SpellCheck.IsEnabled="False" />
        </StackPanel>

    </DataTemplate>

    <!-- Generic Document -->
    <DataTemplate DataType="{x:Type vm:DocumentViewModel}">
        <DockPanel>
            <DockPanel.Resources>
                <Style TargetType="{x:Type ComboBox}">
                    <Setter Property="Opacity" Value="0.1"/>
                    <Setter Property="Height" Value="25"/>
                    <Setter Property="ItemTemplate" Value="{DynamicResource FunctionItemTemplate}"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Resources>
            <ComboBox SelectedItem="{Binding TextBox.SelectedVariable}"  ItemsSource="{Binding TextBox.Variables, ConverterParameter=Function, Converter={StaticResource VariableToFunctionConverter}}"  DockPanel.Dock="Top" />
            <ContentPresenter Content="{Binding TextBox}" DockPanel.Dock="Top"/>
        </DockPanel>
       
    </DataTemplate>

    <!-- KUKA Document -->
    <DataTemplate DataType="{x:Type vm:KukaViewModel}">
        <DockPanel>
            <DockPanel.Resources>
                <Style TargetType="{x:Type ComboBox}">
                    <Setter Property="Opacity" Value="0.1"/>
                    <Setter Property="Height" Value="25"/>
                    <Setter Property="ItemTemplate" Value="{DynamicResource FunctionItemTemplate}"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DockPanel.Resources>
            <ComboBox SelectedItem="{Binding TextBox.SelectedVariable}"  ItemsSource="{Binding TextBox.Variables, ConverterParameter=Function, Converter={StaticResource VariableToFunctionConverter}}"  DockPanel.Dock="Top" />
            <Grid DockPanel.Dock="Top" >
                <Grid.InputBindings>
                    <KeyBinding Command="{Binding ToggleGridCommand}" CommandTarget="{Binding Grid}" Key="T" Modifiers="Control"/>
                </Grid.InputBindings>
                <Grid.RowDefinitions>
                    <RowDefinition Height="2*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="1*"/>
                </Grid.RowDefinitions>
                <ContentPresenter Content="{Binding Source}" Grid.Row="0"/>
                <ContentPresenter Content="{Binding Data}" Grid.Row="2"/>
                <local:ExtendedGridSplitter x:Name="_grid" Grid.Row="1" DataContext="{Binding Grid}"/>
            </Grid>
        </DockPanel>
    </DataTemplate>

    <!-- Editor -->
    <DataTemplate DataType="{x:Type gui:Editor}">
        <DockPanel>
            <ComboBox Height="30" ItemsSource="{Binding Variables}" SelectedItem="{Binding SelectedVariable}" DockPanel.Dock="Top"/>
            <ContentPresenter Content="{Binding ''}" DockPanel.Dock="Top"/>
        </DockPanel>
    </DataTemplate>


    <!-- Notes -->
    <DataTemplate x:Key="NotesWindowTemplate">
        <TextBox TextWrapping="Wrap" Background="DarkGray" BorderThickness="1"/>
    </DataTemplate>


    <DataTemplate DataType="{x:Type vm:FunctionViewModel}">
        <ListView DataContext="{Binding ActiveEditor, IsAsync=True, Source={x:Static miRobotEditor:Workspace.Instance}}"	Background="White"	Foreground="Black" SelectedItem="{Binding TextBox.SelectedVariable}" ItemsSource="{Binding TextBox.Variables, ConverterParameter=Function, Converter={StaticResource VariableToFunctionConverter}}"  ItemTemplate="{DynamicResource FunctionItemTemplate}"  />
    </DataTemplate>

    <DataTemplate x:Key="FunctionItemTemplate" DataType="{x:Type classes:Variable}">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
            <Image Source="{Binding Icon}" DockPanel.Dock="Left"/>
            <Label Content="{Binding Name}" Margin="5,0,0,0" HorizontalAlignment="Stretch">
                <Label.ToolTip>
                    <GroupBox Header="{Binding Name}" FontWeight="ExtraBold" FontSize="14" Foreground="White">
                        <GroupBox.Resources>
                            <Style	TargetType="{x:Type TextBlock}">
                                <Setter Property="FontWeight" Value="Normal" />
                                <Setter Property="Foreground" Value="Black"/>
                            </Style>
                        </GroupBox.Resources>
                        <StackPanel	Orientation="Vertical">
                            <TextBlock Text="{Binding Offset, StringFormat=Offset:\=\{0\}}" Visibility="{Binding ShowOffset, Converter={StaticResource BoolToVisConverter}}" />
                            <TextBlock Text="{Binding Returns, StringFormat=Returns:\=\{0\}}" Visibility="{Binding ShowReturns, Converter={StaticResource BoolToVisConverter}}" />
                            <TextBlock Text="{Binding Declaration, StringFormat=Returns:\=\{0\}}" Visibility="{Binding ShowDeclaration, Converter={StaticResource BoolToVisConverter}}" />
                        </StackPanel>
                    </GroupBox>
                </Label.ToolTip>
            </Label>
        </StackPanel>
    </DataTemplate>
    <Style  TargetType="{x:Type mah:Flyout}">
        <Style.Resources>
            <ResourceDictionary>
                <Style TargetType="{x:Type TextBlock}">
                    <Setter Property="Foreground" Value="Black"/>
                </Style>
                <Style TargetType="{x:Type CheckBox}">
                    <Setter Property="Foreground" Value="Black"/>
                </Style>
            </ResourceDictionary>
        </Style.Resources>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="Opacity" Value="0.35"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="IsOpen" Value="False"/>
            </Trigger>
            <EventTrigger RoutedEvent="UIElement.MouseEnter" >
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To=".95" Duration="0:0:0.5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave" >
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To=".25" Duration="0:0:0.5"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>